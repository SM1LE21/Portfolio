{
    "name": "Tun Keltesch",
    "title": "Project Engineer | Software Engineer",
    "description": "I build robust, user-friendly, and visually appealing web and mobile solutions, with a passion for continuous technical innovation.",
    "about": [
      "Over the past six years, I have immersed myself in the craft of creating digital solutions. My journey has taken me from mastering back-end systems and databases to crafting intuitive front-end experiences, from building responsive websites to developing native mobile applications. Currently, I am channeling all this expertise into ExpenseMate, a full-scale bill-splitting platform that combines all these skills into a practical, user-centric solution.",
      "At Hexagon in Vienna, I currently operate as a Project Engineer, where I continue to tackle new challenges and further evolve my problem solving and creative instincts.",
      "I speak Luxemburgish, French, German, English, and some Portuguese, opening doors to diverse partnerships and fresh perspectives.",
      "Connect with me. Together we can build something extraordinary."
    ],
    "experience": [
      {
        "date": "2024-07 — Present",
        "jobTitle": "Junior Project Engineer",
        "company": "Hexagon",
        "company_link": "https://www.hexagon.com",
        "description": "As a Junior Project Engineer at Hexagon in Vienna, Austria, I support the planning, implementation, and management of engineering projects in the public safety sector.",
        "skills": ["SQL", "C#", "SQL Server", "Azure DevOps", "VBA", "JavaScript", "RabbitMQ", "Microservices"]
      },
      {
        "date": "2023-02 — 2024-06",
        "jobTitle": "Software Engineer (Working Student)",
        "company": "dyve GMBH",
        "company_link": "https://dyve.agency",
        "description": "Developed and maintained a Shopify website and contributed to the new version of Dyve GmbH's website, working flexibly from 8 to 30 hours a week based on project needs.",
        "skills": ["JavaScript", "TypeScript", "Tailwind CSS", "Next.js", "GSAP", "Liquid", "Storyblok", "Shopify"]
      },
      {
        "date": "2023-09 — 2024-01",
        "jobTitle": "Software Engineer",
        "company": "Agile Data Innovation GmbH",
        "company_link": "https://agiledatainnovation.de",
        "description": "Developed an attack tree visualization tool for the Frauenhofer Institut using Angular, TypeScript, and D3.js. Built AI chatbots, improved websites, and handled frontend/backend tasks for multiple projects.",
        "skills": ["Python", "TypeScript", "React", "Angular", "OpenAI API", "Figma", "D3.js"]
      },
      {
        "date": "2023-04 — 2023-07",
        "jobTitle": "Internship (System programming lab)",
        "company": "Chair of Embedded Software at RWTH Aachen University",
        "company_link": "https://www.rwth-aachen.de",
        "description": "Implemented an OS for an ATmega 644 using C. Gained hands-on experience in low-level programming and embedded systems development.",
        "skills": ["C", "Embedded Systems", "OS Development"]
      },
      {
        "date": "2020-08 — 2023-09",
        "jobTitle": "Customer Technical Support",
        "company": "Luxembourg Online S.A.",
        "company_link": "https://www.internet.lu",
        "description": "Provided first-level support to private clients and extended support to business clients, handling internet connectivity issues. Tested and provided feedback on internal tools, enhancing knowledge of web technologies and frontend development.",
        "skills": ["Technical Support", "Troubleshooting", "Customer Service", "Web Technologies", "Frontend Development"]
      }
    ],  
    "certificates": [
      {
        "date": "2025-04-06",
        "jobTitle": "Meta iOS Developer",
        "title_link": "https://www.coursera.org/account/accomplishments/specialization/certificate/Q4TMPJLKM45H",
        "company": "Meta",
        "description": "Learned iOS application development fundamentals, including Swift programming, UI design principles, and application lifecycle management. Gained practical experience in React Native for cross-platform development, and created a portfolio of iOS applications where I learned about publishing and maintenance capabilities."
      },
      {
        "date": "2024-11-11",
        "jobTitle": "RabbitMQ and Messaging Concepts",
        "title_link": "https://www.udemy.com/certificate/UC-f22e44a7-f1ef-4540-8bb5-922972071b8c/",
        "company": "Udemy",
        "description": "Learned the basics of messaging systems and RabbitMQ. Gained hands-on experience configuring RabbitMQ, using the management web interface, and integrating it with C# and Java client libraries to implement common messaging scenarios."
      },
      {
        "date": "2024-07-26",
        "jobTitle": "C# Intermediate: Classes, Interfaces and OOP",
        "title_link": "https://www.udemy.com/certificate/UC-326c8ea5-bc10-4628-99d2-5c5d4860456c/",
        "company": "Udemy",
        "description": "Gained skills in working with classes, interfaces, and object-oriented programming principles with C#. Learned to utilize encapsulation, inheritance, and composition to enhance code robustness and reusability. Developed expertise in building extensible, loosely-coupled, and testable applications using polymorphism and interfaces."
      },
      {
        "date": "2024-07-26",
        "jobTitle": "C# Basics for Beginners: Learn C# Fundamentals by Coding",
        "title_link": "https://www.udemy.com/certificate/UC-00433bd6-c8d0-4ffb-88fb-b33823ce0b22/",
        "company": "Udemy",
        "description": "Learned the fundamentals of C# and .NET Framework, working with primitive and non-primitive types, controlling program flow with conditional statements, using arrays and lists, and working with files, directories, text, and date and time. Also gained skills in debugging C# applications effectively."
      },
      {
        "date": "2024-07-26",
        "jobTitle": "The Complete SQL Bootcamp: Go from Zero to Hero",
        "title_link": "https://www.udemy.com/certificate/UC-9f6b9847-ecdf-44af-89d3-7b6590eef0d8/",
        "company": "Udemy",
        "description": "Gained skills in reading and writing complex SQL queries, utilizing PostgreSQL, and applying these techniques across various major SQL databases. Learned to analyze data with aggregate functions, execute advanced queries, use logical operators, and manage databases efficiently."
      },
      {
        "date": "2022-11-22",
        "jobTitle": "Specialization Certificate - Google UX Design",
        "title_link": "https://www.coursera.org/account/accomplishments/specialization/certificate/SQD9Z8VSSXN2",
        "company": "Google",
        "description": "Completed seven courses that cover the entire UX design process, including empathizing with users, defining pain points, ideating design solutions, creating wireframes and prototypes, and testing designs for feedback."
      },
      {
        "date": "2022-09-11",
        "jobTitle": "Specialization Certificate - Google IT Automation with Python",
        "title_link": "https://www.coursera.org/account/accomplishments/specialization/certificate/CX4GYR2C4FPH",
        "company": "Google",
        "description": "Completed multiple courses including Crash Course on Python, Troubleshooting and Debugging Techniques, Introduction to Git and GitHub, Configuration Management and the Cloud. Gained skills in automating tasks with Python, using Git and GitHub for version control, managing IT resources at scale, and analyzing real-world IT problems to implement appropriate solutions."
      }
    ],      
    "education": [
      {
        "jobTitle": "Bachelor of Science - Computer Science",
        "company": "RWTH Aachen University",
        "company_link": "https://www.rwth-aachen.de"
      },
      {
        "jobTitle": "General Certificate of Secondary Education",
        "company": "Lycée Classique de Diekirch",
        "company_link": "https://www.lcd.lu/",
        "description": "Advanced level in Economics and Mathematics"
      }
    ],
    "projects": [
        {
          "title": "ExpenseMate",
          "description": "A bill-splitting app that makes sharing expenses with friends and groups effortless.",
          "big_description": [
              "ExpenseMate is a comprehensive bill-splitting application designed to simplify the way people share and track expenses. The idea behind this app comes from personal experience with the complexities of group expenses. It aims to make financial management in groups straightforward and efficient.",
              "The app's standout feature is its intelligent receipt scanning capability, which automatically extracts expense details and categorizes them. This, combined with real-time expense tracking and group management, makes ExpenseMate a great tool for anyone who frequently shares expenses with others.",
              "I built ExpenseMate with as a native iOS app using Swift and SwiftUI, focusing on creating a clean and intuitive interface. For the backend, we use FastAPI hosted on Google Cloud Run for scalability and reliability, with data stored securely in Google Cloud SQL. Firebase handles our authentication while push notifications are managed through our own Cloud Run service that communicates with Apple's APNs.",
              "Currently available on iOS, with Android support planned for the near future, ExpenseMate represents my commitment to creating practical, user-friendly solutions to everyday problems."
          ],
          "link": "expensemate.app",
          "link_text": "Visit ExpenseMate",
          "image": "",
          "video": "/assets/expensemate_demo.mov",
          "showMainMedia": true,
          "embedWebsite": false,
          "embedLink": "",
          "skills": [
              "Swift",
              "SwiftUI",
              "Python",
              "Gemini API",
              "OpenAI API",
              "Image Processing",
              "OCR",
              "FastAPI",
              "Google Cloud Run",
              "Google Cloud SQL",
              "Firebase Authentication",
              "Firebase Cloud Messaging",
              "Docker",
              "RESTful APIs",
              "Push Notifications",
              "Receipt Scanning",
              "Real-time Data Sync",
              "Cloud Infrastructure",
              "CI/CD",
              "TypeScript",
              "Next.js",
              "Tailwind CSS"
          ],
          "content": [
              {
                "title": "System Architecture",
                "image": "/assets/expensemate_architecture.png"
              },
              {
                "description": [
                  "ExpenseMate follows a modern service-oriented architecture with five main components:",
                  "1. **iOS App**: Built with Swift and SwiftUI. It serves as the primary user interface, handling receipt scans, expense tracking, and group management. It communicates with Firebase for authentication, the Backend API for data operations, and receives push notifications via APNs.",
                  "2. **Backend API**: Developed with FastAPI and deployed on Google Cloud Run. It manages all business logic, receipt processing, data validation, and API requests from the iOS app. It validates Firebase tokens, sends push notifications via APNs, and interacts securely with the database.",
                  "3. **Database**: A PostgreSQL instance hosted on Google Cloud SQL. It stores all core application data including users, groups, expenses, receipts, and device tokens. It is only accessed by the Backend.",
                  "4. **Firebase**: Used for authentication and cloud messaging. It issues tokens to the iOS app, which the Backend validates. It also manages sessions and push notification tokens.",
                  "5. **Marketing Website**: A standalone Next.js application hosted on Vercel. It serves marketing content, links to the App Store, and hosts documentation. It has no direct interaction with the other systems."
                ]
              },
              {
                "title": "Key Features",
                "description": [
                  "• **Smart Bill Splitting**: Automatically calculate each person's share based on custom rules and percentages.",
                  "• **Receipt Scanning**: Snap a photo and let ExpenseMate extract items and calculate splits automatically.",
                  "• **Group Management**: Create and organize multiple groups for different events or living situations.",
                  "• **Expense Tracking**: Monitor all expenses and settlements with a clear transaction history.",
                  "• **Real-time Updates**: Receive instant notifications when expenses are added or bills are settled.",
                  "• **Debt Settlement**: Streamline repayments with automated calculations and payment tracking."
                ]
              },
              {
                "title": "Future Roadmap"
              },
              {
                "description": [
                  "• **Android App**: Full-featured Android version launching August 2025 with parity to iOS.",
                  "• **Web Dashboard**: Browser-based access for managing expenses, live by September 2025.",
                  "• **PDF/CSV Export**: Generate downloadable reports for documentation and sharing (Q4 2025).",
                  "• **Offline Mode**: Access and manage data without internet, ideal for travel (Q4 2025).",
                  "• **Multi-language Support**: Support for German, French, Spanish, and Portuguese by end of 2025.",
                  "• **Personal Space**: Track personal expenses separately with Excel import (Q1 2026).",
                  "• **Work Space**: Manage business expenses with reporting and personal/business toggles (Q3 2026)."
                ]
              }              
          ]
        },
        {
          "title": "Text2UML",
          "description": "A VS Code extension for automated generation of graphical representations from textual UML diagrams.",
          "big_description": [
              "I developed the Text2UML tool for my bachelor's thesis titled 'Generating Graphical Representations for UML Sequence and Activity Diagrams from Textual Variants'. This thesis presents a tool that automates the generation of graphical representations from textual variants of UML sequence diagrams (SDs) and activity diagrams (ADs), utilizing the MontiCore language workbench. Designed to enhance model-driven software engineering (MDSE) methodologies, this tool is integrated into the Visual Studio Code (VS Code) environment through an extension.",
              "The tool employs the Language Server Protocol (LSP) to extract diagram data from MontiCore DSLs, enabling synchronized visualization alongside the textual model. A key feature of this tool is the bidirectional navigation between textual and visual representations, allowing users to transition from code to diagram and vice versa. This functionality improves the accessibility and utility of MDSE visualizations and facilitates a deeper understanding of UML diagrams.",
              "The main goal of the tool is to provide direct visualization inside VS Code, allowing for a side-by-side view with the textual model on one side and the visualization on the other. The extension dynamically generates and updates visualizations based on any modifications within the text document.",
              "The tool uses Java for the backend (LSP server) and TypeScript for the VS Code extension backend and frontend. React and D3.js are used for rendering the diagrams. The visualization process is separated into layout algorithms and rendering logic. We use ELKJS for the AD renderer and developed a custom layout algorithm for SDs.",
              "This project not only showcases advanced integration techniques and synchronized data visualization but also contributes to the broader MDSE field by improving the interaction between textual and graphical models."
          ],
          "link": "",
          "link_text": "",
          "image": "",
          "video": "/assets/text2uml.mp4",
          "showMainMedia": false,
          "skills": ["Java", "TypeScript", "React", "D3.js", "ELKJS", "MontiCore", "LSP", "VS-Code Extension"],
          "content": [
              {   
                  "title": "Architectural Overview of Text2UML Tool Communication Flow",
                  "image": "/assets/text2uml_frontendBackendCommunication.png",
                  "description": "",
                  "video": ""
              },
              {
                  "title": "Visualization Workflow",
                  "image": "/assets/text2uml_visualizationWorkflow.png",
                  "description": "",
                  "video": ""
              },
              {
                  "title": "Example Videos of the Tool in Action",
                  "image": "",
                  "description": "",
                  "video": "/assets/text2uml_AD.mov"
              },
              {
                  "image": "",
                  "description": "",
                  "video": "/assets/text2uml_SD.mp4"
              }
          ]
        },
        {
          "title": "TK CHAT",
          "description": "AI-powered chat widget for websites, offering direct interaction with a customizable AI assistant.",
          "big_description": [
            "---",
            "TK CHAT is an AI-powered chat widget designed to be easily integrated into websites. It enables user interaction with an AI assistant. The widget offers customization options, allowing it to be tailored to meet the unique needs of different websites and adapt to various screen sizes.",
            "I built the frontend with React and TypeScript. TK CHAT features a responsive design with smooth animations implemented with GSAP. It provides session persistence across page refreshes, along with feedback submission for continuous improvement.",
            "The backend is built with FastAPI and OpenAI's API. Here I used SQLite for data storage and I follow the RESTful API design. It also employs session management, rate limiting, and secure CORS handling to offer both functionality and security.",
            "This project represents my approach to implement an AI enhanced chat functionality. I tried to use advanced frontend and backend technologies to create a smooth user experience. As I continue to implement TK CHAT on websites and expand its functionality, I plan to update this project with new (optional) features and improvements from time to time.",
            "This implementation serves as a starting block for any AI chat functionality on websites. It is easily customizable and can be expanded to include additional features, such as website navigation by asking the AI assistant for help. An Example of this can be on this website, and a description can be found in the 'Portfolio Website' project.",
            "---"
          ],
          "github_link": "github.com/SM1LE21/TK_CHAT/tree/main",
          "link": "",
          "link_text": "",
          "image": "",
          "video": "/assets/TKCHAT_VIDEO.mp4",
          "showMainMedia": false,
          "embedWebsite": false,
          "embedLink": "",
          "skills": [ "React", "TypeScript", "GSAP", "Python", "FastAPI", "SQLite", "OpenAI API", "GPT"],
          "content": [
            {   
              "title": "Feel free to test the tool on this website:",
              "image": "/assets/TKCHAT.png"
            },
            {
              "title": "Example Video of TK CHAT in Action",
              "image": "",
              "description": "",
              "video": "/assets/TKCHAT_VIDEO.mp4"
            }
          ]
        },
        {
          "title": "CanvasCraft",
          "description": "AI image generation tool, with accurate color palette and style transfer.",
          "big_description": [
              "CanvasCraft is an AI-powered image generation tool designed to create stunning visuals. By leveraging OpenAI's DALL-E 3, CanvasCraft transforms text prompts into detailed images, accurately replicating color palettes and applying various art styles.",
              "Users start by entering simple information. Through the help of GPT, the system refines this initial input by internally communicating with itself, ensuring a highly precise and detailed prompt is constructed. This refined prompt is then sent to DALL-E 3 to generate the final image.",
              "The backend, built with Python and Flask, implements OpenAI's API to ensure high-quality image outputs. Users can specify color palettes, themes, moods, and custom prompts to guide the image generation process.",
              "On the frontend, CanvasCraft utilizes React and TailwindCSS to provide an intuitive user interface. The application offers a range of options for users to select their desired artistic elements and see their visions come to life."
          ],
          "link": "",
          "link_text": "",
          "image": "/assets/canvascraft.png",
          "video": "",
          "showMainMedia": false,
          "embedWebsite": true,
          "embedLink": "widgethoster.sytes.net/canvascraft/",
          "skills": ["Python", "Flask", "React", "TailwindCSS", "OpenAI API", "GPT", "DALL-E 3"],
          "content": [
              {   
                  "title": "Feel free to test the tool:"
              }
          ]
        },
        {
          "title": "Portfolio Website",
          "description": "This portfolio website showcasing my work, skills, and projects.",
          "big_description": [
            "This project is my personal portfolio website, designed to present an interactive and visually appealing overview of my professional journey, skills, and completed projects. The website features sections like About Me, Projects, and Contact, all managed via a central data.json file for easy content updates.",
            "The frontend is built with React and TypeScript, utilizing GSAP for smooth animations and enhanced user experience. The project is deployed on GitHub Pages, making it easily accessible and fast to load.",
            "I have integrated **TK CHAT**, my AI-powered chatbot, to assist with navigation and provide information about various sections of the website. The chatbot uses OpenAI's function-calling capabilities to interpret user requests and navigate directly to relevant sections, offering a more interactive user experience.",
            "This website not only showcases my portfolio but also serves as a reusable template for anyone looking to create a similar online presence. It includes a structured data management approach, making content updates straightforward and efficient."
          ],
          "github_link": "github.com/SM1LE21/Portfolio",
          "link": "",
          "link_text": "",
          "image": "/assets/TK_Logo.png",
          "video": "",
          "showMainMedia": false,
          "embedWebsite": false,
          "embedLink": "",
          "skills": [
            "React",
            "TypeScript",
            "GSAP",
            "GitHub Pages",
            "JSON Data Management"
          ],
          "content": [
            {   
              "title": "Feel free to test TK CHAT:",
              "image": "/assets/TKCHAT.png"
            },
            {
              "title": "Example Video of TK CHAT in Action",
              "image": "",
              "description": "",
              "video": "/assets/TKCHAT_VIDEO.mp4"
            },
            {
              "description": [ 
                "---"
              ]
            },
            {
              "title": "Planned Improvements for the Portfolio Website:",
              "description": [
                "1. **Database Integration**: Transition from using a central data.json file to a database solution for more scalable data management. This change will allow for dynamic content updates and more flexibility in displaying information.",
                "2. **Improved Hosting**: Currently, the website is hosted on GitHub Pages, and the backend service for TK CHAT is hosted on a private server (an old PC). While this setup works well for now, it is not a long-term solution. I plan to migrate the backend to a cloud provider for better performance and reliability.",
                "3. **Enhanced TK CHAT Features**: I am continuously working on improving the features of TK CHAT. Currently, the chatbot can navigate to general sections of the website but struggles with navigating to specific project pages. Additionally, the mobile chat experience needs improvement, as users may not notice background navigation changes while the full-screen chat is open.",
                "4. **Expanded AI Functionality**: Future updates will include more advanced function-calling capabilities in TK CHAT, allowing the AI to perform actions beyond navigation, such as providing detailed project explanations or answering specific questions about my skills and experience."
              ]
            }
          ]
        },           
        {
            "title": "LLInvoker",
            "description": "Personalized language learning through news and generated exercises.",
            "big_description": [
                "The project we're presenting, LLInvoker, is a language learning platform that uses the power of AI to offer personalized and dynamic language exercises. Our goal is to make language learning accessible, engaging, and flexible for modern learners by leveraging advanced natural language processing.",
                "Initially, our ideas focused on using news articles and generated exercises to help users improve their language skills. The platform was designed to allow users to select their target language and proficiency level, after which it would provide relevant news articles in the target language. Exercises based on these articles, such as vocabulary quizzes, grammar exercises, and comprehension questions, were also part of the plan. We intended to continue developing the platform beyond the competition deadline of August 12, 2024.",
                "For the competition, we delivered a platform called LLInvoker that integrates the Gemini API to generate A1-level exercises in both German and French. Users can request customized exercises based on their language level and topics of interest. We also included a feature where Gemini corrects and verifies users' answers, offering a more interactive learning experience. Additionally, users can generate custom exercises through a chat feature, allowing them to select exercise types and incorporate images or descriptions to create personalized learning activities. While the platform is in its alpha stage and some features from our initial plans are still under development, we believe LLInvoker demonstrates significant potential.",
                "Looking forward, we plan to collaborate with educational institutions and introduce more advanced exercises, such as those initially planned with news articles, reading exercises, and conversational practice that offers pronunciation feedback. We're also considering a rework of the frontend to make it more playful and user-friendly, likely switching to React Native due to our team's experience with similar frameworks. To get a better idea of our project, you can check out the video we submitted for the competition."
            ],
            "link": "ai.google.dev/",
            "link_text": "Checkout the Gemini API Developer Competition",
            "image": "/assets/gemini.jpg",
            "video": "https://www.youtube.com/watch?v=DG44aGDvXmo",
            "showMainMedia": true,
            "skills": ["Dart", "Flutter", "Google Cloud", "Firebase", "Google Functions", "Python", "Gemini API"],
            "content": [
  
            ]
        }
    ],
      
    "socialLinks": [
        {
            "title": "GitHub",
            "url": "https://github.com/SM1LE21",
            "icon": "/icons/github.svg"
        },
        {
            "title": "Email",
            "url": "mailto:tun.keltesch@gmail.com",
            "icon": "/icons/email.svg"
        },
        {
          "title": "LinkedIn",
          "url": "https://www.linkedin.com/in/tun-keltesch-830294250/",
          "icon": "/icons/linkedin.svg"
        }
      ]      
  }
  